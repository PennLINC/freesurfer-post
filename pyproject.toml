[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "freesurfer-post"
version = "0.1.0"
description = "Post-processing tools for FreeSurfer outputs"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "BSD-3-Clause"}
authors = [
    {name = "PennLINC", email = "linc@pennmedicine.upenn.edu"},
]
keywords = ["neuroimaging", "freesurfer", "post-processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD-3-Clause",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
dependencies = [
    "neuromaps",
    "nipype",
    "click",
    "numpy",
    "pandas",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "black",
    "ruff",
    "mypy",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
]

[project.urls]
Homepage = "https://github.com/PennLINC/freesurfer-post"
Documentation = "https://freesurfer-post.readthedocs.io"
Repository = "https://github.com/PennLINC/freesurfer-post"
"Bug Tracker" = "https://github.com/PennLINC/freesurfer-post/issues"

[project.scripts]
freesurfer-post = "freesurfer_post.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["freesurfer_post*"]

[tool.setuptools.package-data]
"freesurfer_post.data" = ["*.json"]

[tool.black]
line-length = 88
target-version = ['py310']

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10+
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",    # pycodestyle errors
    "E7",    # pycodestyle errors
    "E9",    # pycodestyle errors
    "F",     # Pyflakes
    "W",     # pycodestyle warnings
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "ISC",   # flake8-implicit-str-concat
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PT",    # flake8-pytest-style
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "ARG",   # flake8-unused-arguments
    "PLR",   # Pylint refactor
    "PLW",   # Pylint warnings
    "PLE",   # Pylint errors
]

ignore = [
    "E501",   # line too long, handled by black
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "T201",   # print found (we use print in CLI)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and fixtures
"tests/**/*" = ["PLR2004", "S101", "ARG", "PT"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]